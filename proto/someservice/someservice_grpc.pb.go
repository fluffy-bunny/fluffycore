// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/someservice/someservice.proto

package someservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SomeService_SayHello_FullMethodName = "/someservice.SomeService/SayHello"
)

// SomeServiceClient is the client API for SomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SomeServiceClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type someServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSomeServiceClient(cc grpc.ClientConnInterface) SomeServiceClient {
	return &someServiceClient{cc}
}

func (c *someServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, SomeService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomeServiceServer is the server API for SomeService service.
// All implementations must embed UnimplementedSomeServiceServer
// for forward compatibility
type SomeServiceServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedSomeServiceServer()
}

// UnimplementedSomeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSomeServiceServer struct {
}

func (UnimplementedSomeServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSomeServiceServer) mustEmbedUnimplementedSomeServiceServer() {}

// UnsafeSomeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomeServiceServer will
// result in compilation errors.
type UnsafeSomeServiceServer interface {
	mustEmbedUnimplementedSomeServiceServer()
}

func RegisterSomeServiceServer(s grpc.ServiceRegistrar, srv SomeServiceServer) {
	s.RegisterService(&SomeService_ServiceDesc, srv)
}

func _SomeService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SomeService_ServiceDesc is the grpc.ServiceDesc for SomeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "someservice.SomeService",
	HandlerType: (*SomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SomeService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/someservice/someservice.proto",
}

const (
	SomeService2_SayHello_FullMethodName = "/someservice.SomeService2/SayHello"
)

// SomeService2Client is the client API for SomeService2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SomeService2Client interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply2, error)
}

type someService2Client struct {
	cc grpc.ClientConnInterface
}

func NewSomeService2Client(cc grpc.ClientConnInterface) SomeService2Client {
	return &someService2Client{cc}
}

func (c *someService2Client) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply2, error) {
	out := new(HelloReply2)
	err := c.cc.Invoke(ctx, SomeService2_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomeService2Server is the server API for SomeService2 service.
// All implementations must embed UnimplementedSomeService2Server
// for forward compatibility
type SomeService2Server interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply2, error)
	mustEmbedUnimplementedSomeService2Server()
}

// UnimplementedSomeService2Server must be embedded to have forward compatible implementations.
type UnimplementedSomeService2Server struct {
}

func (UnimplementedSomeService2Server) SayHello(context.Context, *HelloRequest) (*HelloReply2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSomeService2Server) mustEmbedUnimplementedSomeService2Server() {}

// UnsafeSomeService2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomeService2Server will
// result in compilation errors.
type UnsafeSomeService2Server interface {
	mustEmbedUnimplementedSomeService2Server()
}

func RegisterSomeService2Server(s grpc.ServiceRegistrar, srv SomeService2Server) {
	s.RegisterService(&SomeService2_ServiceDesc, srv)
}

func _SomeService2_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeService2Server).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeService2_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeService2Server).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SomeService2_ServiceDesc is the grpc.ServiceDesc for SomeService2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomeService2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "someservice.SomeService2",
	HandlerType: (*SomeService2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SomeService2_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/someservice/someservice.proto",
}
