// Code generated by protoc-gen-go-fluffycore-nats. DO NOT EDIT.

package helloworld

import (
	context "context"
	fluffy_dozm_di "github.com/fluffy-bunny/fluffy-dozm-di"
	endpoint "github.com/fluffy-bunny/fluffycore/contracts/endpoint"
	nats_micro_service1 "github.com/fluffy-bunny/fluffycore/contracts/nats_micro_service"
	client "github.com/fluffy-bunny/fluffycore/nats/client"
	nats_micro_service "github.com/fluffy-bunny/fluffycore/nats/nats_micro_service"
	utils "github.com/fluffy-bunny/fluffycore/utils"
	nats_go "github.com/nats-io/nats.go"
	micro "github.com/nats-io/nats.go/micro"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

var methodGreeterHandlerRuleMap = map[string]*nats_micro_service.NATSMicroHandlerInfo{
	"/helloworld.Greeter/SayHello":           {WildcardToken: "SayHello.org.*", ParameterizedToken: "SayHello.org.${orgId}"},
	"/helloworld.Greeter/SayHelloAuth":       {WildcardToken: "SayHelloAuth", ParameterizedToken: "SayHelloAuth"},
	"/helloworld.Greeter/SayHelloDownstream": {WildcardToken: "SayHelloDownstream", ParameterizedToken: "SayHelloDownstream"},
}

func MethodToSubject_Greeter(method string) (string, bool) {
	ret, ok := methodGreeterHandlerRuleMap[method]
	if !ok {
		return "", false
	}
	return ret.WildcardToken, true
}

func SendNATSRequestUnaryClientInterceptor_Greeter(natsClient *client.NATSClient) grpc.UnaryClientInterceptor {
	return nats_micro_service.SendNATSRequestInterceptor(natsClient, MethodToSubject_Greeter)
}

type GreeterFluffyCoreServerNATSMicroRegistration struct {
}

var stemServiceGreeterFluffyCoreServerNATSMicroRegistration = (*GreeterFluffyCoreServerNATSMicroRegistration)(nil)
var _ endpoint.INATSEndpointRegistration = stemServiceGreeterFluffyCoreServerNATSMicroRegistration

func AddSingletonGreeterFluffyCoreServerNATSMicroRegistration(cb fluffy_dozm_di.ContainerBuilder) {
	fluffy_dozm_di.AddSingleton[endpoint.INATSEndpointRegistration](cb, stemServiceGreeterFluffyCoreServerNATSMicroRegistration.Ctor)
}

func (s *GreeterFluffyCoreServerNATSMicroRegistration) Ctor() (endpoint.INATSEndpointRegistration, error) {
	return &GreeterFluffyCoreServerNATSMicroRegistration{}, nil
}

func (s *GreeterFluffyCoreServerNATSMicroRegistration) RegisterFluffyCoreNATSHandler(ctx context.Context, natsConn *nats_go.Conn, conn *grpc.ClientConn, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	return RegisterGreeterNATSHandler(ctx, natsConn, conn, option)
}

func RegisterGreeterNATSHandler(ctx context.Context, natsCon *nats_go.Conn, conn *grpc.ClientConn, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	client := NewGreeterClient(conn)
	return RegisterGreeterNATSHandlerClient(ctx, natsCon, client, option)
}

func RegisterGreeterNATSHandlerClient(ctx context.Context, nc *nats_go.Conn, client GreeterClient, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	var err error
	defaultConfig := &micro.Config{
		Name:        "Greeter",
		Version:     "0.0.1",
		Description: "The Greeter nats micro service",
	}

	for _, option := range option.ConfigNATSMicroConfigs {
		option(defaultConfig)
	}

	serviceOpions := &nats_micro_service1.ServiceMicroOption{
		GroupName: "roger.helloworld.Greeter",
	}

	for _, option := range option.ConfigServiceMicroOptions {
		option(serviceOpions)
	}

	var svc micro.Service
	svc, err = micro.AddService(nc, *defaultConfig)
	if err != nil {
		return nil, err
	}

	m := svc.AddGroup(serviceOpions.GroupName)
	err = m.AddEndpoint("SayHello",
		micro.HandlerFunc(func(req micro.Request) {
			nats_micro_service.HandleRequest(
				req,
				serviceOpions.GroupName,
				&nats_micro_service.NATSMicroHandlerInfo{
					WildcardToken:      "SayHello.org.*",
					ParameterizedToken: "SayHello.org.${orgId}",
				},
				func(r *HelloRequest) error {
					return proto.Unmarshal(req.Data(), r)
				},
				func() (protoreflect.ProtoMessage, error) {
					request := &HelloRequest{}
					err := proto.Unmarshal(req.Data(), request)
					if err != nil {
						return nil, err
					}
					return request, nil
				},
				func(pm protoreflect.ProtoMessage, req *HelloRequest) error {
					pj, err := proto.Marshal(pm)
					if err != nil {
						return err
					}
					return proto.Unmarshal(pj, req)
				},
				func(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
					return client.SayHello(ctx, request)
				},
			)
		}),
		micro.WithEndpointMetadata(map[string]string{
			"description":     "SayHello",
			"format":          "application/json",
			"request_schema":  utils.SchemaFor(&HelloRequest{}),
			"response_schema": utils.SchemaFor(&HelloReply{}),
		}),
		micro.WithEndpointSubject("SayHello.org.*"),
	)

	if err != nil {
		return nil, err
	}

	err = m.AddEndpoint("SayHelloAuth",
		micro.HandlerFunc(func(req micro.Request) {
			nats_micro_service.HandleRequest(
				req,
				serviceOpions.GroupName,
				&nats_micro_service.NATSMicroHandlerInfo{
					WildcardToken:      "SayHelloAuth",
					ParameterizedToken: "SayHelloAuth",
				},
				func(r *HelloRequest) error {
					return proto.Unmarshal(req.Data(), r)
				},
				func() (protoreflect.ProtoMessage, error) {
					request := &HelloRequest{}
					err := proto.Unmarshal(req.Data(), request)
					if err != nil {
						return nil, err
					}
					return request, nil
				},
				func(pm protoreflect.ProtoMessage, req *HelloRequest) error {
					pj, err := proto.Marshal(pm)
					if err != nil {
						return err
					}
					return proto.Unmarshal(pj, req)
				},
				func(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
					return client.SayHelloAuth(ctx, request)
				},
			)
		}),
		micro.WithEndpointMetadata(map[string]string{
			"description":     "SayHelloAuth",
			"format":          "application/json",
			"request_schema":  utils.SchemaFor(&HelloRequest{}),
			"response_schema": utils.SchemaFor(&HelloReply{}),
		}),
		micro.WithEndpointSubject("SayHelloAuth"),
	)

	if err != nil {
		return nil, err
	}

	err = m.AddEndpoint("SayHelloDownstream",
		micro.HandlerFunc(func(req micro.Request) {
			nats_micro_service.HandleRequest(
				req,
				serviceOpions.GroupName,
				&nats_micro_service.NATSMicroHandlerInfo{
					WildcardToken:      "SayHelloDownstream",
					ParameterizedToken: "SayHelloDownstream",
				},
				func(r *HelloRequest) error {
					return proto.Unmarshal(req.Data(), r)
				},
				func() (protoreflect.ProtoMessage, error) {
					request := &HelloRequest{}
					err := proto.Unmarshal(req.Data(), request)
					if err != nil {
						return nil, err
					}
					return request, nil
				},
				func(pm protoreflect.ProtoMessage, req *HelloRequest) error {
					pj, err := proto.Marshal(pm)
					if err != nil {
						return err
					}
					return proto.Unmarshal(pj, req)
				},
				func(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
					return client.SayHelloDownstream(ctx, request)
				},
			)
		}),
		micro.WithEndpointMetadata(map[string]string{
			"description":     "SayHelloDownstream",
			"format":          "application/json",
			"request_schema":  utils.SchemaFor(&HelloRequest{}),
			"response_schema": utils.SchemaFor(&HelloReply{}),
		}),
		micro.WithEndpointSubject("SayHelloDownstream"),
	)

	if err != nil {
		return nil, err
	}

	return svc, err
}

type (
	GreeterNATSMicroClient struct {
		client *client.NATSClient
	}
)

func NewGreeterNATSMicroClient(opts ...client.NATSClientOption) (GreeterClient, error) {
	client, err := client.NewNATSClient(opts...)
	if err != nil {
		return nil, err
	}

	return &GreeterNATSMicroClient{
		client: client,
	}, nil
}

// SayHello...
func (s *GreeterNATSMicroClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	response := &HelloReply{}
	result, err := nats_micro_service.HandleNATSClientRequest(
		ctx,
		s.client,
		"roger.helloworld.Greeter.SayHello.org.${orgId}",
		in,
		response,
	)
	return result, err
}

// SayHelloAuth...
func (s *GreeterNATSMicroClient) SayHelloAuth(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	response := &HelloReply{}
	result, err := nats_micro_service.HandleNATSClientRequest(
		ctx,
		s.client,
		"roger.helloworld.Greeter.SayHelloAuth",
		in,
		response,
	)
	return result, err
}

// SayHelloDownstream...
func (s *GreeterNATSMicroClient) SayHelloDownstream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	response := &HelloReply{}
	result, err := nats_micro_service.HandleNATSClientRequest(
		ctx,
		s.client,
		"roger.helloworld.Greeter.SayHelloDownstream",
		in,
		response,
	)
	return result, err
}

var methodGreeter2HandlerRuleMap = map[string]*nats_micro_service.NATSMicroHandlerInfo{
	"/helloworld.Greeter2/SayHello": {WildcardToken: "SayHello", ParameterizedToken: "SayHello"},
}

func MethodToSubject_Greeter2(method string) (string, bool) {
	ret, ok := methodGreeter2HandlerRuleMap[method]
	if !ok {
		return "", false
	}
	return ret.WildcardToken, true
}

func SendNATSRequestUnaryClientInterceptor_Greeter2(natsClient *client.NATSClient) grpc.UnaryClientInterceptor {
	return nats_micro_service.SendNATSRequestInterceptor(natsClient, MethodToSubject_Greeter2)
}

type Greeter2FluffyCoreServerNATSMicroRegistration struct {
}

var stemServiceGreeter2FluffyCoreServerNATSMicroRegistration = (*Greeter2FluffyCoreServerNATSMicroRegistration)(nil)
var _ endpoint.INATSEndpointRegistration = stemServiceGreeter2FluffyCoreServerNATSMicroRegistration

func AddSingletonGreeter2FluffyCoreServerNATSMicroRegistration(cb fluffy_dozm_di.ContainerBuilder) {
	fluffy_dozm_di.AddSingleton[endpoint.INATSEndpointRegistration](cb, stemServiceGreeter2FluffyCoreServerNATSMicroRegistration.Ctor)
}

func (s *Greeter2FluffyCoreServerNATSMicroRegistration) Ctor() (endpoint.INATSEndpointRegistration, error) {
	return &Greeter2FluffyCoreServerNATSMicroRegistration{}, nil
}

func (s *Greeter2FluffyCoreServerNATSMicroRegistration) RegisterFluffyCoreNATSHandler(ctx context.Context, natsConn *nats_go.Conn, conn *grpc.ClientConn, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	return RegisterGreeter2NATSHandler(ctx, natsConn, conn, option)
}

func RegisterGreeter2NATSHandler(ctx context.Context, natsCon *nats_go.Conn, conn *grpc.ClientConn, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	client := NewGreeter2Client(conn)
	return RegisterGreeter2NATSHandlerClient(ctx, natsCon, client, option)
}

func RegisterGreeter2NATSHandlerClient(ctx context.Context, nc *nats_go.Conn, client Greeter2Client, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	var err error
	defaultConfig := &micro.Config{
		Name:        "Greeter2",
		Version:     "0.0.1",
		Description: "The Greeter2 nats micro service",
	}

	for _, option := range option.ConfigNATSMicroConfigs {
		option(defaultConfig)
	}

	serviceOpions := &nats_micro_service1.ServiceMicroOption{
		GroupName: "roger.helloworld.Greeter2",
	}

	for _, option := range option.ConfigServiceMicroOptions {
		option(serviceOpions)
	}

	var svc micro.Service
	svc, err = micro.AddService(nc, *defaultConfig)
	if err != nil {
		return nil, err
	}

	m := svc.AddGroup(serviceOpions.GroupName)
	err = m.AddEndpoint("SayHello",
		micro.HandlerFunc(func(req micro.Request) {
			nats_micro_service.HandleRequest(
				req,
				serviceOpions.GroupName,
				&nats_micro_service.NATSMicroHandlerInfo{
					WildcardToken:      "SayHello",
					ParameterizedToken: "SayHello",
				},
				func(r *HelloRequest) error {
					return proto.Unmarshal(req.Data(), r)
				},
				func() (protoreflect.ProtoMessage, error) {
					request := &HelloRequest{}
					err := proto.Unmarshal(req.Data(), request)
					if err != nil {
						return nil, err
					}
					return request, nil
				},
				func(pm protoreflect.ProtoMessage, req *HelloRequest) error {
					pj, err := proto.Marshal(pm)
					if err != nil {
						return err
					}
					return proto.Unmarshal(pj, req)
				},
				func(ctx context.Context, request *HelloRequest) (*HelloReply2, error) {
					return client.SayHello(ctx, request)
				},
			)
		}),
		micro.WithEndpointMetadata(map[string]string{
			"description":     "SayHello",
			"format":          "application/json",
			"request_schema":  utils.SchemaFor(&HelloRequest{}),
			"response_schema": utils.SchemaFor(&HelloReply2{}),
		}),
		micro.WithEndpointSubject("SayHello"),
	)

	if err != nil {
		return nil, err
	}

	return svc, err
}

type (
	Greeter2NATSMicroClient struct {
		client *client.NATSClient
	}
)

func NewGreeter2NATSMicroClient(opts ...client.NATSClientOption) (Greeter2Client, error) {
	client, err := client.NewNATSClient(opts...)
	if err != nil {
		return nil, err
	}

	return &Greeter2NATSMicroClient{
		client: client,
	}, nil
}

// SayHello...
func (s *Greeter2NATSMicroClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply2, error) {
	response := &HelloReply2{}
	result, err := nats_micro_service.HandleNATSClientRequest(
		ctx,
		s.client,
		"roger.helloworld.Greeter2.SayHello",
		in,
		response,
	)
	return result, err
}

type MyStreamServiceFluffyCoreServerNATSMicroRegistration struct {
}

var stemServiceMyStreamServiceFluffyCoreServerNATSMicroRegistration = (*MyStreamServiceFluffyCoreServerNATSMicroRegistration)(nil)
var _ endpoint.INATSEndpointRegistration = stemServiceMyStreamServiceFluffyCoreServerNATSMicroRegistration

func AddSingletonMyStreamServiceFluffyCoreServerNATSMicroRegistration(cb fluffy_dozm_di.ContainerBuilder) {
	fluffy_dozm_di.AddSingleton[endpoint.INATSEndpointRegistration](cb, stemServiceMyStreamServiceFluffyCoreServerNATSMicroRegistration.Ctor)
}

func (s *MyStreamServiceFluffyCoreServerNATSMicroRegistration) Ctor() (endpoint.INATSEndpointRegistration, error) {
	return &MyStreamServiceFluffyCoreServerNATSMicroRegistration{}, nil
}

func (s *MyStreamServiceFluffyCoreServerNATSMicroRegistration) RegisterFluffyCoreNATSHandler(ctx context.Context, natsConn *nats_go.Conn, conn *grpc.ClientConn, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	return RegisterMyStreamServiceNATSHandler(ctx, natsConn, conn, option)
}

func RegisterMyStreamServiceNATSHandler(ctx context.Context, natsCon *nats_go.Conn, conn *grpc.ClientConn, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	client := NewMyStreamServiceClient(conn)
	return RegisterMyStreamServiceNATSHandlerClient(ctx, natsCon, client, option)
}

func RegisterMyStreamServiceNATSHandlerClient(ctx context.Context, nc *nats_go.Conn, client MyStreamServiceClient, option *nats_micro_service1.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	var err error
	defaultConfig := &micro.Config{
		Name:        "MyStreamService",
		Version:     "0.0.1",
		Description: "The MyStreamService nats micro service",
	}

	for _, option := range option.ConfigNATSMicroConfigs {
		option(defaultConfig)
	}

	serviceOpions := &nats_micro_service1.ServiceMicroOption{
		GroupName: "helloworld.MyStreamService",
	}

	for _, option := range option.ConfigServiceMicroOptions {
		option(serviceOpions)
	}

	var svc micro.Service
	return svc, err
}
