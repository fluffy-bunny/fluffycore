// Code generated by protoc-gen-go-fluffycore-nats. DO NOT EDIT.

package helloworld

import (
	context "context"
	fmt "fmt"
	fluffy_dozm_di "github.com/fluffy-bunny/fluffy-dozm-di"
	nats_micro_service "github.com/fluffy-bunny/fluffycore/contracts/nats_micro_service"
	dicontext "github.com/fluffy-bunny/fluffycore/middleware/dicontext"
	nats_micro_service1 "github.com/fluffy-bunny/fluffycore/nats/nats_micro_service"
	utils "github.com/fluffy-bunny/fluffycore/utils"
	nats_go "github.com/nats-io/nats.go"
	micro "github.com/nats-io/nats.go/micro"
	protojson "google.golang.org/protobuf/encoding/protojson"
	reflect "reflect"
	strings "strings"
)

// IFluffyCoreGreeterServerNATSMicro defines the nats micro server interface
type IFluffyCoreGreeterServerNATSMicro interface {
	nats_micro_service.INATSMicroService
	SayHello(req micro.Request)
	SayHelloAuth(req micro.Request)
	SayHelloDownstream(req micro.Request)
}

type GreeterFluffyCoreServerNATSMicro struct {
	natsMicroInterceptors nats_micro_service.INATSMicroInterceptors
}

type GreeterFluffyCoreServerNATSMicroRegistration struct {
	service IFluffyCoreGreeterServerNATSMicro
}

var stemServiceGreeterFluffyCoreServerNATSMicro = (*GreeterFluffyCoreServerNATSMicro)(nil)
var _ IFluffyCoreGreeterServerNATSMicro = stemServiceGreeterFluffyCoreServerNATSMicro

var stemServiceGreeterFluffyCoreServerNATSMicroRegistration = (*GreeterFluffyCoreServerNATSMicroRegistration)(nil)
var _ nats_micro_service.INATSMicroServiceRegisration = stemServiceGreeterFluffyCoreServerNATSMicroRegistration

func AddSingletonGreeterFluffyCoreServerNATSMicro(cb fluffy_dozm_di.ContainerBuilder) {
	fluffy_dozm_di.AddSingleton[nats_micro_service.INATSMicroServiceRegisration](cb, stemServiceGreeterFluffyCoreServerNATSMicroRegistration.Ctor)
	fluffy_dozm_di.AddSingleton[IFluffyCoreGreeterServerNATSMicro](cb, stemServiceGreeterFluffyCoreServerNATSMicro.Ctor)
}

func (s *GreeterFluffyCoreServerNATSMicroRegistration) Ctor(service IFluffyCoreGreeterServerNATSMicro) (nats_micro_service.INATSMicroServiceRegisration, error) {
	return &GreeterFluffyCoreServerNATSMicroRegistration{
		service: service,
	}, nil
}

func (s *GreeterFluffyCoreServerNATSMicroRegistration) AddService(nc *nats_go.Conn, option *nats_micro_service.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	defaultConfig := &micro.Config{
		Name:        "Greeter",
		Version:     "0.0.1",
		Description: "The Greeter nats micro service",
	}
	for _, option := range option.NATSMicroConfigOptions {
		option(defaultConfig)
	}
	svc, err := micro.AddService(nc, *defaultConfig)
	if err != nil {
		return nil, err
	}
	pkgPath := reflect.TypeOf((*IFluffyCoreGreeterServerNATSMicro)(nil)).Elem().PkgPath()
	fullPath := fmt.Sprintf("%s/%s", pkgPath, "Greeter")
	groupName := strings.ReplaceAll(
		fullPath,
		"/",
		".",
	)
	if utils.IsNotEmptyOrNil(option.GroupName) {
		groupName = option.GroupName
	}
	m := svc.AddGroup(groupName)
	m.AddEndpoint("SayHello",
		micro.HandlerFunc(s.service.SayHello),
		micro.WithEndpointMetadata(map[string]string{
			"description":     "SayHello",
			"format":          "application/json",
			"request_schema":  utils.SchemaFor(&HelloRequest{}),
			"response_schema": utils.SchemaFor(&HelloReply{}),
		}))

	m.AddEndpoint("SayHelloAuth",
		micro.HandlerFunc(s.service.SayHelloAuth),
		micro.WithEndpointMetadata(map[string]string{
			"description":     "SayHelloAuth",
			"format":          "application/json",
			"request_schema":  utils.SchemaFor(&HelloRequest{}),
			"response_schema": utils.SchemaFor(&HelloReply{}),
		}))

	m.AddEndpoint("SayHelloDownstream",
		micro.HandlerFunc(s.service.SayHelloDownstream),
		micro.WithEndpointMetadata(map[string]string{
			"description":     "SayHelloDownstream",
			"format":          "application/json",
			"request_schema":  utils.SchemaFor(&HelloRequest{}),
			"response_schema": utils.SchemaFor(&HelloReply{}),
		}))

	return svc, nil
}

func (s *GreeterFluffyCoreServerNATSMicro) Interceptors() nats_micro_service.INATSMicroInterceptors {
	return s.natsMicroInterceptors
}

func (s *GreeterFluffyCoreServerNATSMicro) Ctor(natsMicroInterceptors nats_micro_service.INATSMicroInterceptors) (IFluffyCoreGreeterServerNATSMicro, error) {
	ss := &GreeterFluffyCoreServerNATSMicro{
		natsMicroInterceptors: natsMicroInterceptors,
	}
	return ss, nil
}

// SayHello...
func (s *GreeterFluffyCoreServerNATSMicro) SayHello(req micro.Request) {
	nats_micro_service1.HandleRequest[
		HelloRequest,
		HelloReply](
		s,
		req,
		func(r *HelloRequest) error {
			return protojson.Unmarshal(req.Data(), r)
		},
		func(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
			container := dicontext.GetRequestContainer(ctx)
			downstreamService := fluffy_dozm_di.Get[IFluffyCoreGreeterServer](container)
			return downstreamService.SayHello(ctx, request)
		},
	)
}

// SayHelloAuth...
func (s *GreeterFluffyCoreServerNATSMicro) SayHelloAuth(req micro.Request) {
	nats_micro_service1.HandleRequest[
		HelloRequest,
		HelloReply](
		s,
		req,
		func(r *HelloRequest) error {
			return protojson.Unmarshal(req.Data(), r)
		},
		func(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
			container := dicontext.GetRequestContainer(ctx)
			downstreamService := fluffy_dozm_di.Get[IFluffyCoreGreeterServer](container)
			return downstreamService.SayHelloAuth(ctx, request)
		},
	)
}

// SayHelloDownstream...
func (s *GreeterFluffyCoreServerNATSMicro) SayHelloDownstream(req micro.Request) {
	nats_micro_service1.HandleRequest[
		HelloRequest,
		HelloReply](
		s,
		req,
		func(r *HelloRequest) error {
			return protojson.Unmarshal(req.Data(), r)
		},
		func(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
			container := dicontext.GetRequestContainer(ctx)
			downstreamService := fluffy_dozm_di.Get[IFluffyCoreGreeterServer](container)
			return downstreamService.SayHelloDownstream(ctx, request)
		},
	)
}

// IFluffyCoreGreeter2ServerNATSMicro defines the nats micro server interface
type IFluffyCoreGreeter2ServerNATSMicro interface {
	nats_micro_service.INATSMicroService
	SayHello(req micro.Request)
}

type Greeter2FluffyCoreServerNATSMicro struct {
	natsMicroInterceptors nats_micro_service.INATSMicroInterceptors
}

type Greeter2FluffyCoreServerNATSMicroRegistration struct {
	service IFluffyCoreGreeter2ServerNATSMicro
}

var stemServiceGreeter2FluffyCoreServerNATSMicro = (*Greeter2FluffyCoreServerNATSMicro)(nil)
var _ IFluffyCoreGreeter2ServerNATSMicro = stemServiceGreeter2FluffyCoreServerNATSMicro

var stemServiceGreeter2FluffyCoreServerNATSMicroRegistration = (*Greeter2FluffyCoreServerNATSMicroRegistration)(nil)
var _ nats_micro_service.INATSMicroServiceRegisration = stemServiceGreeter2FluffyCoreServerNATSMicroRegistration

func AddSingletonGreeter2FluffyCoreServerNATSMicro(cb fluffy_dozm_di.ContainerBuilder) {
	fluffy_dozm_di.AddSingleton[nats_micro_service.INATSMicroServiceRegisration](cb, stemServiceGreeter2FluffyCoreServerNATSMicroRegistration.Ctor)
	fluffy_dozm_di.AddSingleton[IFluffyCoreGreeter2ServerNATSMicro](cb, stemServiceGreeter2FluffyCoreServerNATSMicro.Ctor)
}

func (s *Greeter2FluffyCoreServerNATSMicroRegistration) Ctor(service IFluffyCoreGreeter2ServerNATSMicro) (nats_micro_service.INATSMicroServiceRegisration, error) {
	return &Greeter2FluffyCoreServerNATSMicroRegistration{
		service: service,
	}, nil
}

func (s *Greeter2FluffyCoreServerNATSMicroRegistration) AddService(nc *nats_go.Conn, option *nats_micro_service.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	defaultConfig := &micro.Config{
		Name:        "Greeter2",
		Version:     "0.0.1",
		Description: "The Greeter2 nats micro service",
	}
	for _, option := range option.NATSMicroConfigOptions {
		option(defaultConfig)
	}
	svc, err := micro.AddService(nc, *defaultConfig)
	if err != nil {
		return nil, err
	}
	pkgPath := reflect.TypeOf((*IFluffyCoreGreeter2ServerNATSMicro)(nil)).Elem().PkgPath()
	fullPath := fmt.Sprintf("%s/%s", pkgPath, "Greeter2")
	groupName := strings.ReplaceAll(
		fullPath,
		"/",
		".",
	)
	if utils.IsNotEmptyOrNil(option.GroupName) {
		groupName = option.GroupName
	}
	m := svc.AddGroup(groupName)
	m.AddEndpoint("SayHello",
		micro.HandlerFunc(s.service.SayHello),
		micro.WithEndpointMetadata(map[string]string{
			"description":     "SayHello",
			"format":          "application/json",
			"request_schema":  utils.SchemaFor(&HelloRequest{}),
			"response_schema": utils.SchemaFor(&HelloReply2{}),
		}))

	return svc, nil
}

func (s *Greeter2FluffyCoreServerNATSMicro) Interceptors() nats_micro_service.INATSMicroInterceptors {
	return s.natsMicroInterceptors
}

func (s *Greeter2FluffyCoreServerNATSMicro) Ctor(natsMicroInterceptors nats_micro_service.INATSMicroInterceptors) (IFluffyCoreGreeter2ServerNATSMicro, error) {
	ss := &Greeter2FluffyCoreServerNATSMicro{
		natsMicroInterceptors: natsMicroInterceptors,
	}
	return ss, nil
}

// SayHello...
func (s *Greeter2FluffyCoreServerNATSMicro) SayHello(req micro.Request) {
	nats_micro_service1.HandleRequest[
		HelloRequest,
		HelloReply2](
		s,
		req,
		func(r *HelloRequest) error {
			return protojson.Unmarshal(req.Data(), r)
		},
		func(ctx context.Context, request *HelloRequest) (*HelloReply2, error) {
			container := dicontext.GetRequestContainer(ctx)
			downstreamService := fluffy_dozm_di.Get[IFluffyCoreGreeter2Server](container)
			return downstreamService.SayHello(ctx, request)
		},
	)
}

// IFluffyCoreMyStreamServiceServerNATSMicro defines the nats micro server interface
type IFluffyCoreMyStreamServiceServerNATSMicro interface {
	nats_micro_service.INATSMicroService
}

type MyStreamServiceFluffyCoreServerNATSMicro struct {
	natsMicroInterceptors nats_micro_service.INATSMicroInterceptors
}

type MyStreamServiceFluffyCoreServerNATSMicroRegistration struct {
	service IFluffyCoreMyStreamServiceServerNATSMicro
}

var stemServiceMyStreamServiceFluffyCoreServerNATSMicro = (*MyStreamServiceFluffyCoreServerNATSMicro)(nil)
var _ IFluffyCoreMyStreamServiceServerNATSMicro = stemServiceMyStreamServiceFluffyCoreServerNATSMicro

var stemServiceMyStreamServiceFluffyCoreServerNATSMicroRegistration = (*MyStreamServiceFluffyCoreServerNATSMicroRegistration)(nil)
var _ nats_micro_service.INATSMicroServiceRegisration = stemServiceMyStreamServiceFluffyCoreServerNATSMicroRegistration

func AddSingletonMyStreamServiceFluffyCoreServerNATSMicro(cb fluffy_dozm_di.ContainerBuilder) {
	fluffy_dozm_di.AddSingleton[nats_micro_service.INATSMicroServiceRegisration](cb, stemServiceMyStreamServiceFluffyCoreServerNATSMicroRegistration.Ctor)
	fluffy_dozm_di.AddSingleton[IFluffyCoreMyStreamServiceServerNATSMicro](cb, stemServiceMyStreamServiceFluffyCoreServerNATSMicro.Ctor)
}

func (s *MyStreamServiceFluffyCoreServerNATSMicroRegistration) Ctor(service IFluffyCoreMyStreamServiceServerNATSMicro) (nats_micro_service.INATSMicroServiceRegisration, error) {
	return &MyStreamServiceFluffyCoreServerNATSMicroRegistration{
		service: service,
	}, nil
}

func (s *MyStreamServiceFluffyCoreServerNATSMicroRegistration) AddService(nc *nats_go.Conn, option *nats_micro_service.NATSMicroServiceRegisrationOption) (micro.Service, error) {
	defaultConfig := &micro.Config{
		Name:        "MyStreamService",
		Version:     "0.0.1",
		Description: "The MyStreamService nats micro service",
	}
	for _, option := range option.NATSMicroConfigOptions {
		option(defaultConfig)
	}
	svc, err := micro.AddService(nc, *defaultConfig)
	if err != nil {
		return nil, err
	}
	return svc, nil
}

func (s *MyStreamServiceFluffyCoreServerNATSMicro) Interceptors() nats_micro_service.INATSMicroInterceptors {
	return s.natsMicroInterceptors
}

func (s *MyStreamServiceFluffyCoreServerNATSMicro) Ctor(natsMicroInterceptors nats_micro_service.INATSMicroInterceptors) (IFluffyCoreMyStreamServiceServerNATSMicro, error) {
	ss := &MyStreamServiceFluffyCoreServerNATSMicro{
		natsMicroInterceptors: natsMicroInterceptors,
	}
	return ss, nil
}
