// Code generated by protoc-gen-go-fluffycore-di. DO NOT EDIT.

package helloworld

import (
	context "context"
	di "github.com/dozm/di"
	endpoint "github.com/fluffy-bunny/fluffycore/contracts/endpoint"
	dicontext "github.com/fluffy-bunny/fluffycore/middleware/dicontext"
	grpc "google.golang.org/grpc"
)

// IGreeterServer defines the grpc server
type IGreeterServer interface {
	GreeterServer
}

// greeterServer defines the grpc server truct
type greeterServer struct {
	UnimplementedGreeterServer
}

// Register the server with grpc
func (srv *greeterServer) Register(s *grpc.Server) {
	RegisterGreeterServer(s, srv)
}

// AddGreeterServer adds the fluffycore aware grpc server
func AddGreeterServer[T IGreeterServer](cb di.ContainerBuilder, ctor any) {
	di.AddSingleton[endpoint.IEndpointRegistration](cb, func() endpoint.IEndpointRegistration {
		return &greeterServer{}
	})
	di.AddScoped[IGreeterServer](cb, ctor)
}

// SayHello...
func (s *greeterServer) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := di.Get[IGreeterServer](requestContainer)
	return downstreamService.SayHello(ctx, request)
}

// IGreeter2Server defines the grpc server
type IGreeter2Server interface {
	Greeter2Server
}

// greeter2Server defines the grpc server truct
type greeter2Server struct {
	UnimplementedGreeter2Server
}

// Register the server with grpc
func (srv *greeter2Server) Register(s *grpc.Server) {
	RegisterGreeter2Server(s, srv)
}

// AddGreeter2Server adds the fluffycore aware grpc server
func AddGreeter2Server[T IGreeter2Server](cb di.ContainerBuilder, ctor any) {
	di.AddSingleton[endpoint.IEndpointRegistration](cb, func() endpoint.IEndpointRegistration {
		return &greeter2Server{}
	})
	di.AddScoped[IGreeter2Server](cb, ctor)
}

// SayHello...
func (s *greeter2Server) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply2, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := di.Get[IGreeter2Server](requestContainer)
	return downstreamService.SayHello(ctx, request)
}

// IMyStreamServiceServer defines the grpc server
type IMyStreamServiceServer interface {
	MyStreamServiceServer
}

// mystreamserviceServer defines the grpc server truct
type mystreamserviceServer struct {
	UnimplementedMyStreamServiceServer
}

// Register the server with grpc
func (srv *mystreamserviceServer) Register(s *grpc.Server) {
	RegisterMyStreamServiceServer(s, srv)
}

// AddMyStreamServiceServer adds the fluffycore aware grpc server
func AddMyStreamServiceServer[T IMyStreamServiceServer](cb di.ContainerBuilder, ctor any) {
	di.AddSingleton[endpoint.IEndpointRegistration](cb, func() endpoint.IEndpointRegistration {
		return &mystreamserviceServer{}
	})
	di.AddScoped[IMyStreamServiceServer](cb, ctor)
}

// RequestPoints...
func (s *mystreamserviceServer) RequestPoints(request *PointsRequest, stream MyStreamService_RequestPointsServer) error {
	ctx := stream.Context()
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := di.Get[IMyStreamServiceServer](requestContainer)
	return downstreamService.RequestPoints(request, stream)
}

// StreamPoints...
func (s *mystreamserviceServer) StreamPoints(stream MyStreamService_StreamPointsServer) error {
	ctx := stream.Context()
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := di.Get[IMyStreamServiceServer](requestContainer)
	return downstreamService.StreamPoints(stream)
}
