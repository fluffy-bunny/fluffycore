// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/fluffycore/contracts/otel (interfaces: IOpenTelemetry)

// Package otel is a generated GoMock package.
package otel

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOpenTelemetry is a mock of IOpenTelemetry interface.
type MockIOpenTelemetry struct {
	ctrl     *gomock.Controller
	recorder *MockIOpenTelemetryMockRecorder
}

// MockIOpenTelemetryMockRecorder is the mock recorder for MockIOpenTelemetry.
type MockIOpenTelemetryMockRecorder struct {
	mock *MockIOpenTelemetry
}

// NewMockIOpenTelemetry creates a new mock instance.
func NewMockIOpenTelemetry(ctrl *gomock.Controller) *MockIOpenTelemetry {
	mock := &MockIOpenTelemetry{ctrl: ctrl}
	mock.recorder = &MockIOpenTelemetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOpenTelemetry) EXPECT() *MockIOpenTelemetryMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockIOpenTelemetry) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockIOpenTelemetryMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIOpenTelemetry)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockIOpenTelemetry) Stop(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0)
}

// Stop indicates an expected call of Stop.
func (mr *MockIOpenTelemetryMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIOpenTelemetry)(nil).Stop), arg0)
}
